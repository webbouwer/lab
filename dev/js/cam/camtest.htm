<!DOCTYPE html>
<html> 
  <head>
    <meta charset="utf-8">
    <title>Cam test</title>
    <script src="https://threejs.org/build/three.min.js"></script>
<script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>
      
    <!-- inspiration
    https://airtightinteractive.com/demos/js/webcammesh/
    https://tastenkunst.github.io/brfv4_javascript_examples/


    -- testing
    https://jsfiddle.net/webbouwer/9pnvmg4s/
    -->
      
<style>
 html, body {
                width: 100%;
                height: 100%;
            }

            body {
                background-color: #ffffff;
                margin: 0;
                overflow: hidden;
                font-family: arial;
            }

            #blocker {

                position: absolute;

                width: 100%;
                height: 100%;

                background-color: rgba(0,0,0,0.5);

            }

            #instructions {

                width: 100%;
                height: 100%;

                display: -webkit-box;
                display: -moz-box;
                display: box;

                -webkit-box-orient: horizontal;
                -moz-box-orient: horizontal;
                box-orient: horizontal;

                -webkit-box-pack: center;
                -moz-box-pack: center;
                box-pack: center;

                -webkit-box-align: center;
                -moz-box-align: center;
                box-align: center;

                color: #ffffff;
                text-align: center;

                cursor: pointer;

            }

      </style>
  </head>
  <body>
<video id="video" autoplay style="display:none"></video>
      

<div id="blocker">

            <div id="instructions">
                <span style="font-size:40px">Click for Webcam request</span>
                <br />
                Webcam Texture experiment with native Javasript getUserMedia and ThreeJS
            </div>

        </div>      
      
      
<script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>


<script>
    
document.querySelector('#instructions').addEventListener('click', async function init(e) {
    

    // request webcam 
  try {
    const stream = await navigator.mediaDevices.getUserMedia({
      audio: false,
      video: true
    })
    const videoTracks = stream.getVideoTracks()
    const track = videoTracks[0]
    alert(`Getting video from: ${track.label}`)
    document.querySelector('video').srcObject = stream
      
    
    document.querySelector('#blocker').style.display = 'none';  
    //document.querySelector('#get-access').setAttribute('hidden', true)
    //setTimeout(() => { track.stop() }, 3 * 1000)
  } catch (error) {
    //alert(`${error.name}`)
    console.error(error)
    
    document.querySelector('#instructions').innerHTML = 'Your browser doesn\'t seem to support Webcam stream';
  }
})

// Simple three.js example
var mesh, mesh1, mesh2, renderer, scene, camera, controls;

init();
animate();

function init() {

    // renderer
    renderer = new THREE.WebGLRenderer();
    renderer.setSize( window.innerWidth, window.innerHeight );
    renderer.setClearColor( 0x2E8B57 );
    document.body.appendChild( renderer.domElement );

    // scene
    scene = new THREE.Scene();
    
    // camera
    camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1, 1000 );
    camera.position.set( 20, 20, 20 );
    scene.add( camera ); // required, since adding light as child of camera

    // controls
    controls = new THREE.OrbitControls( camera ); // controls = new THREE.OrbitControls( camera, renderer.domElement );
    controls.enableZoom = true;
    controls.enablePan = true;
    controls.maxPolarAngle = Math.PI / 2;
    controls.enableDamping = true;
    controls.dampingFactor = 0.1; 
    
    camera.zoom = 3;
    camera.updateProjectionMatrix();
    
    // ambient
    scene.add( new THREE.AmbientLight( 0x444444 ) );
    
    // light
    var light = new THREE.PointLight( 0xffffff, 0.8 );
    camera.add( light );
    
    // axes
    //scene.add( new THREE.AxisHelper( 20 ) );

   

    // geometry
    var geometry = new THREE.BoxGeometry( 20, 10, 20 );
    
    // material
    var material1 = new THREE.MeshPhongMaterial( {
        color: 0x4B0082, 
        transparent: true,
        opacity: 0.8
    } );
    // mesh
    mesh1 = new THREE.Mesh( geometry, material1 );
    mesh1.position.set( 0 , 0, 0 );
    scene.add( mesh1 );
    
    // material
    var video = document.getElementById( 'video' );
    var texture = new THREE.VideoTexture( video );
    texture.minFilter = THREE.LinearFilter;
    var material2 = new THREE.MeshBasicMaterial( { 
        map: texture, 
        transparent: false,
        side: THREE.BackSide
    } );
    // mesh
    mesh2 = new THREE.Mesh( geometry, material2 );
    mesh2.position.set( 0 , 0, 0 );
    scene.add( mesh2 );
    
    
    window.cubeCamera = new THREE.CubeCamera( 1, 1000, 256 ); // near, far, resolution
    scene.add(cubeCamera);
    
     // geometry
    var geometry = new THREE.BoxGeometry( 12, 8, 1 );
    // material
    var material1 = new THREE.MeshPhongMaterial( {
        color: 0x00FF7F
    } );
    material1.envMap = cubeCamera.renderTarget.texture;
    
    // mesh
    mesh = new THREE.Mesh( geometry, material1 );
    mesh.position.set( 2, 0, 6 );
    scene.add( mesh );

    // geometry
    var geometry = new THREE.BoxGeometry( 2, 2, 2 );
    // material
    var material1 = new THREE.MeshPhongMaterial( {
        color: 0x8FBC8F
    } );
    material1.envMap = cubeCamera.renderTarget.texture;
    
    // mesh
    mesh = new THREE.Mesh( geometry, material1 );
    mesh.position.set( -2 , - 4, - 6 );
    scene.add( mesh );
    
}

function animate() {

    requestAnimationFrame( animate );
    
    controls.update();
    
    cubeCamera.update(renderer, scene);
    renderer.render( scene, camera );

}


  </script>
  </body>

</html>