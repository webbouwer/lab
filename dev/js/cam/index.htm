<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - materials - video - webcam</title>
		<meta charset="utf-8">

<title>J-Space file setup</title>

<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="viewport" content="initial-scale=1.0, width=device-width" />

<!-- 
<link rel="stylesheet" href="../../library/global.css" type="text/css" media="all"> 
<script src="three.min.js"></script>   
-->
    
    <style>
    body {
	margin: 0;
	background-color: #000;
	color: #fff;
	font-family: Monospace;
	font-size: 13px;
	line-height: 24px;
}

a {
	color: #ff0;
	text-decoration: none;
}

a:hover {
	text-decoration: underline;
}

button {
	cursor: pointer;
	text-transform: uppercase;
}

canvas {
	display: block;
}

#info {
	position: absolute;
	top: 0px;
	width: 100%;
	padding: 10px;
	box-sizing: border-box;
	text-align: center;
	-moz-user-select: none;
	-webkit-user-select: none;
	-ms-user-select: none;
	user-select: none;
	pointer-events: none;
	z-index: 1; /* TODO Solve this in HTML */
}

a, button, input, select {
	pointer-events: auto;
}

.dg.ac {
	-moz-user-select: none;
	-webkit-user-select: none;
	-ms-user-select: none;
	user-select: none;
	z-index: 2 !important; /* TODO Solve this in HTML */
}
    
    </style>
        <!--
        <script src="https://threejs.org/build/three.min.js"></script>
        <script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>


https://gist.github.com/darkwave/bdf3de0478877e46b7fbfbbef8caf277
https://threejs.org/examples/webgl_materials_video_webcam.html
        -->
</head>
<body>

    
    <video id="video" autoplay style="display:none"></video>

		<script type="module">

			import * as THREE from 'https://threejs.org/build/three.module.js'; // https://threejs.org/build/three.module.js 

			import { OrbitControls } from './OrbitControls.js'; // https://threejs.org/examples/jsm/controls/OrbitControls.js

			var camera, scene, renderer, video;

			init();
			animate();

			function init() {

				camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 0.1, 100 );
				camera.position.z = 0.01;

				scene = new THREE.Scene();

				video = document.getElementById( 'video' );

				var texture = new THREE.VideoTexture( video );

				var geometry = new THREE.PlaneBufferGeometry( 16, 9 );
				geometry.scale( 0.5, 0.5, 0.5 );
				var material = new THREE.MeshBasicMaterial( { map: texture } );

				var count = 128;
				var radius = 32;

				for ( var i = 1, l = count; i <= l; i ++ ) {

					var phi = Math.acos( - 1 + ( 2 * i ) / l );
					var theta = Math.sqrt( l * Math.PI ) * phi;

					var mesh = new THREE.Mesh( geometry, material );
					mesh.position.setFromSphericalCoords( radius, phi, theta );
					mesh.lookAt( camera.position );
					scene.add( mesh );

				}

				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				document.body.appendChild( renderer.domElement );

				var controls = new OrbitControls( camera, renderer.domElement );
				controls.enableZoom = false;
				controls.enablePan = false;

				window.addEventListener( 'resize', onWindowResize, false );

				//

				if ( navigator.mediaDevices && navigator.mediaDevices.getUserMedia ) {

					var constraints = { video: { width: 1280, height: 720, facingMode: 'user' } };

					navigator.mediaDevices.getUserMedia( constraints ).then( function ( stream ) {

						// apply the stream to the video element used in the texture

						video.srcObject = stream;
						video.play();

					} ).catch( function ( error ) {

						console.error( 'Unable to access the camera/webcam.', error );

					} );

				} else {

					console.error( 'MediaDevices interface not available.' );

				}

			}

			function onWindowResize() {

				 camera.aspect = window.innerWidth / window.innerHeight;
				 camera.updateProjectionMatrix();

				 renderer.setSize( window.innerWidth, window.innerHeight );

			}

			function animate() {

				 requestAnimationFrame( animate );
				 renderer.render( scene, camera );

			}

		</script>
    <canvas width="1250" height="942" style="width: 1250px; height: 942px;"></canvas>
</body>