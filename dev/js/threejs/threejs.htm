<!DOCTYPE html>
<html>
    <head>
        
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <title>ThreeJS test setup</title> 
        
        <style>
            body {
                width:100%;
                height:100%;
				background-color: #000;
				color: #fff;
				margin: 0px;
				overflow: hidden;
			}
        </style>
        
        
    </head>
    <body>
        
        <script src="https://threejs.org/build/three.min.js"></script>
        <script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script> 
        <script>
            var mesh, cube,renderer, scene, camera, light, controls, group;

			var targetRotation = 0;
            
            init();
            animate();

            function init() {

                // renderer
                renderer = new THREE.WebGLRenderer();
                renderer.setSize( window.innerWidth, window.innerHeight );
                renderer.setClearColor( 0x232323 );
                
                // add shadow
                renderer.shadowMap.enabled = true; 
                renderer.shadowMap.type = THREE.PCFSoftShadowMap; // default THREE.PCFShadowMap
                
                document.body.appendChild( renderer.domElement );

                // scene
                scene = new THREE.Scene();

                // camera // https://threejs.org/docs/#api/en/cameras/PerspectiveCamera
                camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1, 1000 );
                camera.position.set( 45, 20, 10, 20 ); // fov, aspect , near, far
                scene.add( camera ); // required, since adding light as child of camera
            
                // controls // https://threejs.org/docs/#examples/controls/OrbitControls.domElement
                controls = new THREE.OrbitControls( camera );
                //controls.enableZoom = true;
                controls.minDistance = 10; 
                controls.maxDistance = 20; 
                controls.enablePan = false; 
                //controls.enableRotate = false; // disable rotation controls
                controls.maxPolarAngle = Math.PI / 2; // limit rotation controls (vertically, upper limit)
                
                // ambient
                scene.add( new THREE.AmbientLight( 0x232323 ) );

                // light
                //light = new THREE.PointLight( 0x666666, 0.8 );
                light = new THREE.DirectionalLight( 0x666666, 0.9, 100 );
                light.position.set( 30, 5, -10 ); 			//default; light shining from top
                light.castShadow = true;            // // add shadow; default false
                camera.add( light );
                
                
                //Set up shadow properties for the light
                light.shadow.mapSize.width = 512;  // default 512
                light.shadow.mapSize.height = 512; // default 512
                light.shadow.camera.near = 0.5;    // default 0.5
                light.shadow.camera.far = 500;     // default 500

                // axes
                //scene.add( new THREE.AxisHelper( 20 ) );

                
                // group 
                group = new THREE.Group();
                group.position.set( 0 , 0, 0 );
				scene.add( group );
                
                /* two cubes for testing */
                // geometry
                var geometry = new THREE.BoxGeometry( 10, 1, 10 );

                // material
                var material = new THREE.MeshPhongMaterial( {
                    color: 'gray'
                } );

                // mesh
                mesh = new THREE.Mesh( geometry, material );
                mesh.position.x = 0;
                mesh.position.y = 0;
                mesh.position.z = 0;
                group.add( mesh );
                
                
                // second mesh/cube
                var geometry = new THREE.BoxGeometry( 1, 5, 1 );
                var material = new THREE.MeshBasicMaterial( { color: 0x00bb00 } );
                cube = new THREE.Mesh( geometry, material );
                cube.receiveShadow = true;  
                group.add( cube );
            
            }
            
            function animate() {
                
                requestAnimationFrame( animate );
                cube.rotation.x += 0.005;
                cube.rotation.y += 0.01;
                controls.update();
                render();
                
            }
            
            function render() {
                //group.rotation.y += 0.005; //group.rotation.y += ( targetRotation - group.rotation.y ) * 0.05;
				renderer.render( scene, camera );
			}
        </script>
        
    </body>
</html>