<!DOCTYPE html>
<html>
<head>

<!-- HTML meta -->
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="viewport" content="initial-scale=1.0, width=device-width" />

<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

<!-- HTML doc title -->
<title>ThreeJS Boilerplate</title>

<!-- meta tags -->
<meta name="description" content="Basic HTML5 boilerplate v1 2022">
<meta name="author" content="Webbouwer">
<meta name="keywords" content="HTML5, HTML, boilerplate, template, html template, basic, basic html">

<!-- libraries -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.122.0/examples/js/controls/OrbitControls.min.js"></script>



<style>
body
{
margin:0;
padding:0;
}
</style>
</head>
<body>

  <!-- custom script -->
  <script>
  var container;

  var camera, scene, renderer, controls;

  init();
  animate();

  function init() {


    renderer = new THREE.WebGLRenderer({
      alpha: true
    });
    renderer.setClearColor(0x000000, 0);
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    scene = new THREE.Scene();

    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1000);
    camera.position.set(20,3, 50);

    controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.minDistance = 200;
    controls.maxDistance = 500;

    scene.add(new THREE.AmbientLight(0x222222));

    var light = new THREE.PointLight(0xffffff);
    light.position.copy(camera.position);
    scene.add(light);

    var mesh = addShape();
    mesh.position.set(0, 0, 0);
    scene.add(mesh);

    window.addEventListener('resize', onWindowResize, false);

  }


  // extrude shape and add material
  function addShape() {

    var poly = makePolygon();

    var extrudeSettings = {
      amount: 20,
      steps: 1,
      material: 1,
      extrudeMaterial: 0,
      bevelEnabled: true,
      bevelThickness: 2,
      bevelSize: 4,
      bevelSegments: 1,
    };

    var geometry = new THREE.ExtrudeGeometry(poly, extrudeSettings);

    var material = new THREE.MeshLambertMaterial({
      color: 0xb00000,
      wireframe: false
    });

    var mesh = new THREE.Mesh(geometry, new THREE.MeshFaceMaterial(material));

    return mesh;

  }

  // draw points to create polygon shape
  function makePolygon() {

    var poly = new THREE.Shape();

    poly.moveTo(-20, -40);
    poly.lineTo(40, -40);
    poly.lineTo(20, -20);
    poly.lineTo(40, 40);
    poly.lineTo(-40, 40);

    return poly;
  }


  function animate() {

    requestAnimationFrame(animate);

    controls.update();

    renderer.render(scene, camera);

  }

  function onWindowResize() {

    windowHalfX = window.innerWidth / 2;
    windowHalfY = window.innerHeight / 2;

    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();

    renderer.setSize(window.innerWidth, window.innerHeight);

  }

  </script>

</body>
</html>
